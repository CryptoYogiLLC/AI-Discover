name: Security Scanning

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: "0 2 * * *"
  workflow_dispatch:
  push:
    branches: [main, develop]

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  # OWASP Dependency Check
  dependency-check:
    name: OWASP Dependency Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: "ai-discover"
          path: "."
          format: "ALL"
          args: >
            --enableRetired
            --enableExperimental

      - name: Upload results
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-report
          path: reports/

  # Container Scanning with Grype
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    strategy:
      matrix:
        image: [backend, frontend]
    steps:
      - uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          docker build -t ai-discover-${{ matrix.image }}:scan ./${{ matrix.image }}

      - name: Run Grype vulnerability scanner
        uses: anchore/scan-action@v3
        with:
          image: ai-discover-${{ matrix.image }}:scan
          fail-build: true
          severity-cutoff: high

      - name: Upload Grype results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ steps.scan.outputs.sarif }}

  # License Scanning
  license-scan:
    name: License Compliance Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Check Python licenses
        run: |
          pip install pip-licenses
          cd backend && pip-licenses --format=markdown --with-urls --fail-on="GPL;LGPL" > ../python-licenses.md

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Check Node licenses
        run: |
          npm install -g license-checker
          cd frontend && license-checker --production --excludePrivatePackages --onlyAllow "MIT;Apache-2.0;BSD;ISC;CC0-1.0" > ../node-licenses.txt

      - name: Upload license reports
        uses: actions/upload-artifact@v4
        with:
          name: license-reports
          path: |
            python-licenses.md
            node-licenses.txt

  # Infrastructure as Code Scanning
  iac-scan:
    name: IaC Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: all
          output_format: sarif
          output_file_path: checkov.sarif

      - name: Upload Checkov results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: checkov.sarif

  # DAST Scan (on staging only)
  dast-scan:
    name: OWASP ZAP DAST Scan
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    steps:
      - uses: actions/checkout@v4

      - name: Run OWASP ZAP
        uses: zaproxy/action-full-scan@v0.10.0
        with:
          target: "https://staging.ai-discover.example.com"
          rules_file_name: ".zap/rules.tsv"
          cmd_options: "-a"

      - name: Upload ZAP results
        uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: report_html.html

  # Security Scorecard
  scorecard:
    name: Security Scorecard
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      id-token: write
      contents: read
      actions: read
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Run Scorecard
        uses: ossf/scorecard-action@v2.3.1
        with:
          results_file: scorecard.sarif
          results_format: sarif
          publish_results: true

      - name: Upload results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: scorecard.sarif
